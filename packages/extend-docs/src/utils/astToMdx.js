/**
 * @desc Converts an mdxjs AST back to a .mdx file.
 * Needed when not possible to directly hook into mdxjs via remark plugins.
 * Supports type 'doc::raw-mdx-output' for direct text output.
 * @param {object} ast generated by mdxjs. It does allow modified asts that have a
 * 'doc::raw-mdx-output', In this case, not start and end offsets of the sourceCode
 * but this exact value will be used for output.
 * @param {string} sourceCode The unparsed/plain text source file of the AST
 */
function astToMdx(ast, sourceCode) {
  let output = '';
  let curNode = null;
  let prevNode = null;
  function processLvl(children, lvl = 0) {
    children.forEach(node => {
      curNode = node;
      if (prevNode) {
        output +=
          (prevNode.type === 'doc::raw-mdx-output' && prevNode.value) ||
          sourceCode.slice(prevNode.position.start.offset, curNode.position.start.offset);
      }
      prevNode = node;
      if (node.children) {
        processLvl(node.children, lvl + 1);
      }
    });

    // Since we always print prevNode(to be able to handle offsets),
    // once done looping, we need to print the curNode.
    if (lvl === 0 && curNode) {
      output +=
        (curNode.type === 'doc::raw-mdx-output' && curNode.value) ||
        sourceCode.slice(curNode.position.start.offset, curNode.position.end.offset);
    }
  }
  processLvl(ast.children);
  // console.log('aussput', output);
  return output;
}

module.exports = astToMdx;
